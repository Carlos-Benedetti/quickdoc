#!/usr/bin/env node

const td = require('typedoc');
const rimraf = require('rimraf')
const concat = require('concat-md')
const app = new td.CliApplication();
const createFile = require('create-file');
const args = require('args')

/**
 * @type {Partial<td.TypeDocAndTSOptions>}
 */
const options= {
    mode: 'file',
    includeDeclarations: true,
    tsconfig: 'tsconfig.json',
    out: './docs',
    excludePrivate: true,
    excludeProtected: true,
    excludeExternals: true,
    name: 'ts-commons',
    ignoreCompilerErrors: true,
    plugin: ['typedoc-plugin-markdown'],
    listInvalidSymbolLinks: true,
    theme: 'markdown'
  };

function awaitRimRaf(path) {
    return new Promise((resolve, reject) => {
        rimraf(path, (e) => {
            if(e){
                console.error("ERRO:",e)
            }
            resolve()
        })
    })
}

async function main() {
    //remove old docs folder
    await awaitRimRaf('docs')

    //build docs
    app.bootstrap(options);

    //remove README.md
    await awaitRimRaf('docs/README.md')

    //concat all md-files
    const file = concat.concatMdSync('docs', { decreaseTitleLevels: true, dirNameAsTitle: true, toc: true })
    createFile('API.md', file, (e) => {
        if(e){
            console.error(e
                )
        }
    })
    //remove docs folder
    await awaitRimRaf('docs')
}
main()








